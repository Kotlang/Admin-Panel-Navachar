/**
 * @fileoverview gRPC-Web generated client stub for notification
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: messaging-service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as messaging$service_pb from './messaging-service_pb'; // proto import: "messaging-service.proto"


export class MessagingServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorBroadcastMessage = new grpcWeb.MethodDescriptor(
    '/notification.MessagingService/BroadcastMessage',
    grpcWeb.MethodType.UNARY,
    messaging$service_pb.MesssageRequest,
    messaging$service_pb.StatusResponse,
    (request: messaging$service_pb.MesssageRequest) => {
      return request.serializeBinary();
    },
    messaging$service_pb.StatusResponse.deserializeBinary
  );

  broadcastMessage(
    request: messaging$service_pb.MesssageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging$service_pb.StatusResponse>;

  broadcastMessage(
    request: messaging$service_pb.MesssageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging$service_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<messaging$service_pb.StatusResponse>;

  broadcastMessage(
    request: messaging$service_pb.MesssageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging$service_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.MessagingService/BroadcastMessage',
        request,
        metadata || {},
        this.methodDescriptorBroadcastMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.MessagingService/BroadcastMessage',
    request,
    metadata || {},
    this.methodDescriptorBroadcastMessage);
  }

  methodDescriptorSendUniqueMessage = new grpcWeb.MethodDescriptor(
    '/notification.MessagingService/SendUniqueMessage',
    grpcWeb.MethodType.UNARY,
    messaging$service_pb.UniqueMessageRequest,
    messaging$service_pb.StatusResponse,
    (request: messaging$service_pb.UniqueMessageRequest) => {
      return request.serializeBinary();
    },
    messaging$service_pb.StatusResponse.deserializeBinary
  );

  sendUniqueMessage(
    request: messaging$service_pb.UniqueMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging$service_pb.StatusResponse>;

  sendUniqueMessage(
    request: messaging$service_pb.UniqueMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging$service_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<messaging$service_pb.StatusResponse>;

  sendUniqueMessage(
    request: messaging$service_pb.UniqueMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging$service_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.MessagingService/SendUniqueMessage',
        request,
        metadata || {},
        this.methodDescriptorSendUniqueMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.MessagingService/SendUniqueMessage',
    request,
    metadata || {},
    this.methodDescriptorSendUniqueMessage);
  }

  methodDescriptorRegisterMessagingTemplate = new grpcWeb.MethodDescriptor(
    '/notification.MessagingService/RegisterMessagingTemplate',
    grpcWeb.MethodType.UNARY,
    messaging$service_pb.MessagingTemplate,
    messaging$service_pb.StatusResponse,
    (request: messaging$service_pb.MessagingTemplate) => {
      return request.serializeBinary();
    },
    messaging$service_pb.StatusResponse.deserializeBinary
  );

  registerMessagingTemplate(
    request: messaging$service_pb.MessagingTemplate,
    metadata?: grpcWeb.Metadata | null): Promise<messaging$service_pb.StatusResponse>;

  registerMessagingTemplate(
    request: messaging$service_pb.MessagingTemplate,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging$service_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<messaging$service_pb.StatusResponse>;

  registerMessagingTemplate(
    request: messaging$service_pb.MessagingTemplate,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging$service_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.MessagingService/RegisterMessagingTemplate',
        request,
        metadata || {},
        this.methodDescriptorRegisterMessagingTemplate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.MessagingService/RegisterMessagingTemplate',
    request,
    metadata || {},
    this.methodDescriptorRegisterMessagingTemplate);
  }

  methodDescriptorGetMessagingTemplateById = new grpcWeb.MethodDescriptor(
    '/notification.MessagingService/GetMessagingTemplateById',
    grpcWeb.MethodType.UNARY,
    messaging$service_pb.IdRequest,
    messaging$service_pb.MessagingTemplate,
    (request: messaging$service_pb.IdRequest) => {
      return request.serializeBinary();
    },
    messaging$service_pb.MessagingTemplate.deserializeBinary
  );

  getMessagingTemplateById(
    request: messaging$service_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging$service_pb.MessagingTemplate>;

  getMessagingTemplateById(
    request: messaging$service_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging$service_pb.MessagingTemplate) => void): grpcWeb.ClientReadableStream<messaging$service_pb.MessagingTemplate>;

  getMessagingTemplateById(
    request: messaging$service_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging$service_pb.MessagingTemplate) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.MessagingService/GetMessagingTemplateById',
        request,
        metadata || {},
        this.methodDescriptorGetMessagingTemplateById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.MessagingService/GetMessagingTemplateById',
    request,
    metadata || {},
    this.methodDescriptorGetMessagingTemplateById);
  }

}

