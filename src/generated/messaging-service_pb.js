// source: messaging-service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.notification.ActionType', null, global);
goog.exportSymbol('proto.notification.Button', null, global);
goog.exportSymbol('proto.notification.ButtonType', null, global);
goog.exportSymbol('proto.notification.CallToActionButtons', null, global);
goog.exportSymbol('proto.notification.Category', null, global);
goog.exportSymbol('proto.notification.FetchMessageRequest', null, global);
goog.exportSymbol('proto.notification.FetchTemplateRequest', null, global);
goog.exportSymbol('proto.notification.MediaParameters', null, global);
goog.exportSymbol('proto.notification.MediaType', null, global);
goog.exportSymbol('proto.notification.MessageFilters', null, global);
goog.exportSymbol('proto.notification.MessageList', null, global);
goog.exportSymbol('proto.notification.MessageProto', null, global);
goog.exportSymbol('proto.notification.MessagingTemplate', null, global);
goog.exportSymbol('proto.notification.MessagingTemplateList', null, global);
goog.exportSymbol('proto.notification.MesssageRequest', null, global);
goog.exportSymbol('proto.notification.QuickReplyButtons', null, global);
goog.exportSymbol('proto.notification.ScheduleInfo', null, global);
goog.exportSymbol('proto.notification.StatusResponse', null, global);
goog.exportSymbol('proto.notification.UniqueMessageRequest', null, global);
goog.exportSymbol('proto.notification.Url', null, global);
goog.exportSymbol('proto.notification.UrlType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.Url = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.Url, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.Url.displayName = 'proto.notification.Url';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.CallToActionButtons = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.CallToActionButtons, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.CallToActionButtons.displayName = 'proto.notification.CallToActionButtons';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.QuickReplyButtons = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.QuickReplyButtons, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.QuickReplyButtons.displayName = 'proto.notification.QuickReplyButtons';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.Button = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notification.Button.repeatedFields_, null);
};
goog.inherits(proto.notification.Button, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.Button.displayName = 'proto.notification.Button';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.MediaParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.MediaParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.MediaParameters.displayName = 'proto.notification.MediaParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.MessagingTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.MessagingTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.MessagingTemplate.displayName = 'proto.notification.MessagingTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.UniqueMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notification.UniqueMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.notification.UniqueMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.UniqueMessageRequest.displayName = 'proto.notification.UniqueMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.ScheduleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.ScheduleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.ScheduleInfo.displayName = 'proto.notification.ScheduleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.MesssageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notification.MesssageRequest.repeatedFields_, null);
};
goog.inherits(proto.notification.MesssageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.MesssageRequest.displayName = 'proto.notification.MesssageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.StatusResponse.displayName = 'proto.notification.StatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.MessagingTemplateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notification.MessagingTemplateList.repeatedFields_, null);
};
goog.inherits(proto.notification.MessagingTemplateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.MessagingTemplateList.displayName = 'proto.notification.MessagingTemplateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.FetchTemplateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.FetchTemplateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.FetchTemplateRequest.displayName = 'proto.notification.FetchTemplateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.MessageProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notification.MessageProto.repeatedFields_, null);
};
goog.inherits(proto.notification.MessageProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.MessageProto.displayName = 'proto.notification.MessageProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.MessageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notification.MessageList.repeatedFields_, null);
};
goog.inherits(proto.notification.MessageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.MessageList.displayName = 'proto.notification.MessageList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.MessageFilters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.MessageFilters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.MessageFilters.displayName = 'proto.notification.MessageFilters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notification.FetchMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notification.FetchMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.notification.FetchMessageRequest.displayName = 'proto.notification.FetchMessageRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.Url.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.Url.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.Url} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.Url.toObject = function(includeInstance, msg) {
  var f, obj = {
    urltype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    link: jspb.Message.getFieldWithDefault(msg, 2, ""),
    urlparametersMap: (f = msg.getUrlparametersMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.Url}
 */
proto.notification.Url.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.Url;
  return proto.notification.Url.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.Url} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.Url}
 */
proto.notification.Url.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.notification.UrlType} */ (reader.readEnum());
      msg.setUrltype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 3:
      var value = msg.getUrlparametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.Url.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.Url.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.Url} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.Url.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrltype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrlparametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional UrlType urlType = 1;
 * @return {!proto.notification.UrlType}
 */
proto.notification.Url.prototype.getUrltype = function() {
  return /** @type {!proto.notification.UrlType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.notification.UrlType} value
 * @return {!proto.notification.Url} returns this
 */
proto.notification.Url.prototype.setUrltype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string link = 2;
 * @return {string}
 */
proto.notification.Url.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.Url} returns this
 */
proto.notification.Url.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> urlParameters = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.notification.Url.prototype.getUrlparametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.notification.Url} returns this
 */
proto.notification.Url.prototype.clearUrlparametersMap = function() {
  this.getUrlparametersMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.CallToActionButtons.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.CallToActionButtons.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.CallToActionButtons} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.CallToActionButtons.toObject = function(includeInstance, msg) {
  var f, obj = {
    actiontype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phonenumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    url: (f = msg.getUrl()) && proto.notification.Url.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.CallToActionButtons}
 */
proto.notification.CallToActionButtons.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.CallToActionButtons;
  return proto.notification.CallToActionButtons.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.CallToActionButtons} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.CallToActionButtons}
 */
proto.notification.CallToActionButtons.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.notification.ActionType} */ (reader.readEnum());
      msg.setActiontype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    case 4:
      var value = new proto.notification.Url;
      reader.readMessage(value,proto.notification.Url.deserializeBinaryFromReader);
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.CallToActionButtons.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.CallToActionButtons.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.CallToActionButtons} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.CallToActionButtons.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.notification.Url.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActionType actionType = 1;
 * @return {!proto.notification.ActionType}
 */
proto.notification.CallToActionButtons.prototype.getActiontype = function() {
  return /** @type {!proto.notification.ActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.notification.ActionType} value
 * @return {!proto.notification.CallToActionButtons} returns this
 */
proto.notification.CallToActionButtons.prototype.setActiontype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.notification.CallToActionButtons.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.CallToActionButtons} returns this
 */
proto.notification.CallToActionButtons.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string phoneNumber = 3;
 * @return {string}
 */
proto.notification.CallToActionButtons.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.CallToActionButtons} returns this
 */
proto.notification.CallToActionButtons.prototype.setPhonenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Url url = 4;
 * @return {?proto.notification.Url}
 */
proto.notification.CallToActionButtons.prototype.getUrl = function() {
  return /** @type{?proto.notification.Url} */ (
    jspb.Message.getWrapperField(this, proto.notification.Url, 4));
};


/**
 * @param {?proto.notification.Url|undefined} value
 * @return {!proto.notification.CallToActionButtons} returns this
*/
proto.notification.CallToActionButtons.prototype.setUrl = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.CallToActionButtons} returns this
 */
proto.notification.CallToActionButtons.prototype.clearUrl = function() {
  return this.setUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.CallToActionButtons.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.QuickReplyButtons.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.QuickReplyButtons.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.QuickReplyButtons} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.QuickReplyButtons.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.QuickReplyButtons}
 */
proto.notification.QuickReplyButtons.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.QuickReplyButtons;
  return proto.notification.QuickReplyButtons.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.QuickReplyButtons} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.QuickReplyButtons}
 */
proto.notification.QuickReplyButtons.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.QuickReplyButtons.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.QuickReplyButtons.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.QuickReplyButtons} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.QuickReplyButtons.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.notification.QuickReplyButtons.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.QuickReplyButtons} returns this
 */
proto.notification.QuickReplyButtons.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notification.Button.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.Button.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.Button.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.Button} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.Button.toObject = function(includeInstance, msg) {
  var f, obj = {
    calltoactionbuttonsList: jspb.Message.toObjectList(msg.getCalltoactionbuttonsList(),
    proto.notification.CallToActionButtons.toObject, includeInstance),
    quickreplybuttonsList: jspb.Message.toObjectList(msg.getQuickreplybuttonsList(),
    proto.notification.QuickReplyButtons.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.Button}
 */
proto.notification.Button.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.Button;
  return proto.notification.Button.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.Button} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.Button}
 */
proto.notification.Button.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.notification.CallToActionButtons;
      reader.readMessage(value,proto.notification.CallToActionButtons.deserializeBinaryFromReader);
      msg.addCalltoactionbuttons(value);
      break;
    case 2:
      var value = new proto.notification.QuickReplyButtons;
      reader.readMessage(value,proto.notification.QuickReplyButtons.deserializeBinaryFromReader);
      msg.addQuickreplybuttons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.Button.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.Button.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.Button} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.Button.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalltoactionbuttonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.notification.CallToActionButtons.serializeBinaryToWriter
    );
  }
  f = message.getQuickreplybuttonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.notification.QuickReplyButtons.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CallToActionButtons callToActionButtons = 1;
 * @return {!Array<!proto.notification.CallToActionButtons>}
 */
proto.notification.Button.prototype.getCalltoactionbuttonsList = function() {
  return /** @type{!Array<!proto.notification.CallToActionButtons>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.notification.CallToActionButtons, 1));
};


/**
 * @param {!Array<!proto.notification.CallToActionButtons>} value
 * @return {!proto.notification.Button} returns this
*/
proto.notification.Button.prototype.setCalltoactionbuttonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.notification.CallToActionButtons=} opt_value
 * @param {number=} opt_index
 * @return {!proto.notification.CallToActionButtons}
 */
proto.notification.Button.prototype.addCalltoactionbuttons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.notification.CallToActionButtons, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.Button} returns this
 */
proto.notification.Button.prototype.clearCalltoactionbuttonsList = function() {
  return this.setCalltoactionbuttonsList([]);
};


/**
 * repeated QuickReplyButtons quickReplyButtons = 2;
 * @return {!Array<!proto.notification.QuickReplyButtons>}
 */
proto.notification.Button.prototype.getQuickreplybuttonsList = function() {
  return /** @type{!Array<!proto.notification.QuickReplyButtons>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.notification.QuickReplyButtons, 2));
};


/**
 * @param {!Array<!proto.notification.QuickReplyButtons>} value
 * @return {!proto.notification.Button} returns this
*/
proto.notification.Button.prototype.setQuickreplybuttonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.notification.QuickReplyButtons=} opt_value
 * @param {number=} opt_index
 * @return {!proto.notification.QuickReplyButtons}
 */
proto.notification.Button.prototype.addQuickreplybuttons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.notification.QuickReplyButtons, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.Button} returns this
 */
proto.notification.Button.prototype.clearQuickreplybuttonsList = function() {
  return this.setQuickreplybuttonsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.MediaParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.MediaParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.MediaParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MediaParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediatype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    link: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.MediaParameters}
 */
proto.notification.MediaParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.MediaParameters;
  return proto.notification.MediaParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.MediaParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.MediaParameters}
 */
proto.notification.MediaParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.notification.MediaType} */ (reader.readEnum());
      msg.setMediatype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.MediaParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.MediaParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.MediaParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MediaParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMediatype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional MediaType mediaType = 1;
 * @return {!proto.notification.MediaType}
 */
proto.notification.MediaParameters.prototype.getMediatype = function() {
  return /** @type {!proto.notification.MediaType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.notification.MediaType} value
 * @return {!proto.notification.MediaParameters} returns this
 */
proto.notification.MediaParameters.prototype.setMediatype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string link = 2;
 * @return {string}
 */
proto.notification.MediaParameters.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MediaParameters} returns this
 */
proto.notification.MediaParameters.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string filename = 3;
 * @return {string}
 */
proto.notification.MediaParameters.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MediaParameters} returns this
 */
proto.notification.MediaParameters.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.MessagingTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.MessagingTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.MessagingTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessagingTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    templatename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mediaparameters: (f = msg.getMediaparameters()) && proto.notification.MediaParameters.toObject(includeInstance, f),
    header: jspb.Message.getFieldWithDefault(msg, 4, ""),
    headerparametersMap: (f = msg.getHeaderparametersMap()) ? f.toObject(includeInstance, undefined) : [],
    body: jspb.Message.getFieldWithDefault(msg, 6, ""),
    bodyparametersMap: (f = msg.getBodyparametersMap()) ? f.toObject(includeInstance, undefined) : [],
    footer: jspb.Message.getFieldWithDefault(msg, 8, ""),
    category: jspb.Message.getFieldWithDefault(msg, 9, 0),
    wabaid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    buttontype: jspb.Message.getFieldWithDefault(msg, 11, 0),
    buttons: (f = msg.getButtons()) && proto.notification.Button.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.MessagingTemplate}
 */
proto.notification.MessagingTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.MessagingTemplate;
  return proto.notification.MessagingTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.MessagingTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.MessagingTemplate}
 */
proto.notification.MessagingTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplatename(value);
      break;
    case 3:
      var value = new proto.notification.MediaParameters;
      reader.readMessage(value,proto.notification.MediaParameters.deserializeBinaryFromReader);
      msg.setMediaparameters(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeader(value);
      break;
    case 5:
      var value = msg.getHeaderparametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 7:
      var value = msg.getBodyparametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFooter(value);
      break;
    case 9:
      var value = /** @type {!proto.notification.Category} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWabaid(value);
      break;
    case 11:
      var value = /** @type {!proto.notification.ButtonType} */ (reader.readEnum());
      msg.setButtontype(value);
      break;
    case 12:
      var value = new proto.notification.Button;
      reader.readMessage(value,proto.notification.Button.deserializeBinaryFromReader);
      msg.setButtons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.MessagingTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.MessagingTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.MessagingTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessagingTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTemplatename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMediaparameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.notification.MediaParameters.serializeBinaryToWriter
    );
  }
  f = message.getHeader();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeaderparametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBodyparametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getFooter();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getWabaid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getButtontype();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getButtons();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.notification.Button.serializeBinaryToWriter
    );
  }
};


/**
 * optional string templateId = 1;
 * @return {string}
 */
proto.notification.MessagingTemplate.prototype.getTemplateid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setTemplateid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string templateName = 2;
 * @return {string}
 */
proto.notification.MessagingTemplate.prototype.getTemplatename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setTemplatename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional MediaParameters mediaParameters = 3;
 * @return {?proto.notification.MediaParameters}
 */
proto.notification.MessagingTemplate.prototype.getMediaparameters = function() {
  return /** @type{?proto.notification.MediaParameters} */ (
    jspb.Message.getWrapperField(this, proto.notification.MediaParameters, 3));
};


/**
 * @param {?proto.notification.MediaParameters|undefined} value
 * @return {!proto.notification.MessagingTemplate} returns this
*/
proto.notification.MessagingTemplate.prototype.setMediaparameters = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.clearMediaparameters = function() {
  return this.setMediaparameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.MessagingTemplate.prototype.hasMediaparameters = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string header = 4;
 * @return {string}
 */
proto.notification.MessagingTemplate.prototype.getHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setHeader = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> HeaderParameters = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.notification.MessagingTemplate.prototype.getHeaderparametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.clearHeaderparametersMap = function() {
  this.getHeaderparametersMap().clear();
  return this;
};


/**
 * optional string body = 6;
 * @return {string}
 */
proto.notification.MessagingTemplate.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> BodyParameters = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.notification.MessagingTemplate.prototype.getBodyparametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.clearBodyparametersMap = function() {
  this.getBodyparametersMap().clear();
  return this;
};


/**
 * optional string footer = 8;
 * @return {string}
 */
proto.notification.MessagingTemplate.prototype.getFooter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setFooter = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional Category category = 9;
 * @return {!proto.notification.Category}
 */
proto.notification.MessagingTemplate.prototype.getCategory = function() {
  return /** @type {!proto.notification.Category} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.notification.Category} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string wabaId = 10;
 * @return {string}
 */
proto.notification.MessagingTemplate.prototype.getWabaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setWabaid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional ButtonType buttonType = 11;
 * @return {!proto.notification.ButtonType}
 */
proto.notification.MessagingTemplate.prototype.getButtontype = function() {
  return /** @type {!proto.notification.ButtonType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.notification.ButtonType} value
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.setButtontype = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional Button buttons = 12;
 * @return {?proto.notification.Button}
 */
proto.notification.MessagingTemplate.prototype.getButtons = function() {
  return /** @type{?proto.notification.Button} */ (
    jspb.Message.getWrapperField(this, proto.notification.Button, 12));
};


/**
 * @param {?proto.notification.Button|undefined} value
 * @return {!proto.notification.MessagingTemplate} returns this
*/
proto.notification.MessagingTemplate.prototype.setButtons = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.MessagingTemplate} returns this
 */
proto.notification.MessagingTemplate.prototype.clearButtons = function() {
  return this.setButtons(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.MessagingTemplate.prototype.hasButtons = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notification.UniqueMessageRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.UniqueMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.UniqueMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.UniqueMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.UniqueMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.notification.MesssageRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.UniqueMessageRequest}
 */
proto.notification.UniqueMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.UniqueMessageRequest;
  return proto.notification.UniqueMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.UniqueMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.UniqueMessageRequest}
 */
proto.notification.UniqueMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.notification.MesssageRequest;
      reader.readMessage(value,proto.notification.MesssageRequest.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.UniqueMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.UniqueMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.UniqueMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.UniqueMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.notification.MesssageRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MesssageRequest messages = 1;
 * @return {!Array<!proto.notification.MesssageRequest>}
 */
proto.notification.UniqueMessageRequest.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.notification.MesssageRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.notification.MesssageRequest, 1));
};


/**
 * @param {!Array<!proto.notification.MesssageRequest>} value
 * @return {!proto.notification.UniqueMessageRequest} returns this
*/
proto.notification.UniqueMessageRequest.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.notification.MesssageRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.notification.MesssageRequest}
 */
proto.notification.UniqueMessageRequest.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.notification.MesssageRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.UniqueMessageRequest} returns this
 */
proto.notification.UniqueMessageRequest.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.ScheduleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.ScheduleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.ScheduleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.ScheduleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    isscheduled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    scheduledtime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.ScheduleInfo}
 */
proto.notification.ScheduleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.ScheduleInfo;
  return proto.notification.ScheduleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.ScheduleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.ScheduleInfo}
 */
proto.notification.ScheduleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsscheduled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScheduledtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.ScheduleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.ScheduleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.ScheduleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.ScheduleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsscheduled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getScheduledtime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bool isScheduled = 1;
 * @return {boolean}
 */
proto.notification.ScheduleInfo.prototype.getIsscheduled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.notification.ScheduleInfo} returns this
 */
proto.notification.ScheduleInfo.prototype.setIsscheduled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 scheduledTime = 2;
 * @return {number}
 */
proto.notification.ScheduleInfo.prototype.getScheduledtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.ScheduleInfo} returns this
 */
proto.notification.ScheduleInfo.prototype.setScheduledtime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notification.MesssageRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.MesssageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.MesssageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.MesssageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MesssageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headerparametersMap: (f = msg.getHeaderparametersMap()) ? f.toObject(includeInstance, undefined) : [],
    bodyparametersMap: (f = msg.getBodyparametersMap()) ? f.toObject(includeInstance, undefined) : [],
    buttonparametersMap: (f = msg.getButtonparametersMap()) ? f.toObject(includeInstance, undefined) : [],
    mediaparameters: (f = msg.getMediaparameters()) && proto.notification.MediaParameters.toObject(includeInstance, f),
    recipientphonenumberList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    wabaid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    preview: jspb.Message.getFieldWithDefault(msg, 8, ""),
    scheduleinfo: (f = msg.getScheduleinfo()) && proto.notification.ScheduleInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.MesssageRequest}
 */
proto.notification.MesssageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.MesssageRequest;
  return proto.notification.MesssageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.MesssageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.MesssageRequest}
 */
proto.notification.MesssageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateid(value);
      break;
    case 2:
      var value = msg.getHeaderparametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = msg.getBodyparametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = msg.getButtonparametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = new proto.notification.MediaParameters;
      reader.readMessage(value,proto.notification.MediaParameters.deserializeBinaryFromReader);
      msg.setMediaparameters(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addRecipientphonenumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWabaid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreview(value);
      break;
    case 9:
      var value = new proto.notification.ScheduleInfo;
      reader.readMessage(value,proto.notification.ScheduleInfo.deserializeBinaryFromReader);
      msg.setScheduleinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.MesssageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.MesssageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.MesssageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MesssageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeaderparametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBodyparametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getButtonparametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMediaparameters();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.notification.MediaParameters.serializeBinaryToWriter
    );
  }
  f = message.getRecipientphonenumberList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getWabaid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPreview();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getScheduleinfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.notification.ScheduleInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string templateId = 1;
 * @return {string}
 */
proto.notification.MesssageRequest.prototype.getTemplateid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.setTemplateid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> HeaderParameters = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.notification.MesssageRequest.prototype.getHeaderparametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.clearHeaderparametersMap = function() {
  this.getHeaderparametersMap().clear();
  return this;
};


/**
 * map<string, string> BodyParameters = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.notification.MesssageRequest.prototype.getBodyparametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.clearBodyparametersMap = function() {
  this.getBodyparametersMap().clear();
  return this;
};


/**
 * map<string, string> ButtonParameters = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.notification.MesssageRequest.prototype.getButtonparametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.clearButtonparametersMap = function() {
  this.getButtonparametersMap().clear();
  return this;
};


/**
 * optional MediaParameters mediaParameters = 5;
 * @return {?proto.notification.MediaParameters}
 */
proto.notification.MesssageRequest.prototype.getMediaparameters = function() {
  return /** @type{?proto.notification.MediaParameters} */ (
    jspb.Message.getWrapperField(this, proto.notification.MediaParameters, 5));
};


/**
 * @param {?proto.notification.MediaParameters|undefined} value
 * @return {!proto.notification.MesssageRequest} returns this
*/
proto.notification.MesssageRequest.prototype.setMediaparameters = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.clearMediaparameters = function() {
  return this.setMediaparameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.MesssageRequest.prototype.hasMediaparameters = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string recipientPhoneNumber = 6;
 * @return {!Array<string>}
 */
proto.notification.MesssageRequest.prototype.getRecipientphonenumberList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.setRecipientphonenumberList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.addRecipientphonenumber = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.clearRecipientphonenumberList = function() {
  return this.setRecipientphonenumberList([]);
};


/**
 * optional string wabaid = 7;
 * @return {string}
 */
proto.notification.MesssageRequest.prototype.getWabaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.setWabaid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string preview = 8;
 * @return {string}
 */
proto.notification.MesssageRequest.prototype.getPreview = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.setPreview = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional ScheduleInfo scheduleInfo = 9;
 * @return {?proto.notification.ScheduleInfo}
 */
proto.notification.MesssageRequest.prototype.getScheduleinfo = function() {
  return /** @type{?proto.notification.ScheduleInfo} */ (
    jspb.Message.getWrapperField(this, proto.notification.ScheduleInfo, 9));
};


/**
 * @param {?proto.notification.ScheduleInfo|undefined} value
 * @return {!proto.notification.MesssageRequest} returns this
*/
proto.notification.MesssageRequest.prototype.setScheduleinfo = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.MesssageRequest} returns this
 */
proto.notification.MesssageRequest.prototype.clearScheduleinfo = function() {
  return this.setScheduleinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.MesssageRequest.prototype.hasScheduleinfo = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.StatusResponse}
 */
proto.notification.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.StatusResponse;
  return proto.notification.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.StatusResponse}
 */
proto.notification.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.notification.StatusResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.StatusResponse} returns this
 */
proto.notification.StatusResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notification.MessagingTemplateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.MessagingTemplateList.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.MessagingTemplateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.MessagingTemplateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessagingTemplateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    templatesList: jspb.Message.toObjectList(msg.getTemplatesList(),
    proto.notification.MessagingTemplate.toObject, includeInstance),
    totalcount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.MessagingTemplateList}
 */
proto.notification.MessagingTemplateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.MessagingTemplateList;
  return proto.notification.MessagingTemplateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.MessagingTemplateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.MessagingTemplateList}
 */
proto.notification.MessagingTemplateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.notification.MessagingTemplate;
      reader.readMessage(value,proto.notification.MessagingTemplate.deserializeBinaryFromReader);
      msg.addTemplates(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.MessagingTemplateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.MessagingTemplateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.MessagingTemplateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessagingTemplateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.notification.MessagingTemplate.serializeBinaryToWriter
    );
  }
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated MessagingTemplate templates = 1;
 * @return {!Array<!proto.notification.MessagingTemplate>}
 */
proto.notification.MessagingTemplateList.prototype.getTemplatesList = function() {
  return /** @type{!Array<!proto.notification.MessagingTemplate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.notification.MessagingTemplate, 1));
};


/**
 * @param {!Array<!proto.notification.MessagingTemplate>} value
 * @return {!proto.notification.MessagingTemplateList} returns this
*/
proto.notification.MessagingTemplateList.prototype.setTemplatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.notification.MessagingTemplate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.notification.MessagingTemplate}
 */
proto.notification.MessagingTemplateList.prototype.addTemplates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.notification.MessagingTemplate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MessagingTemplateList} returns this
 */
proto.notification.MessagingTemplateList.prototype.clearTemplatesList = function() {
  return this.setTemplatesList([]);
};


/**
 * optional int32 totalCount = 2;
 * @return {number}
 */
proto.notification.MessagingTemplateList.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.MessagingTemplateList} returns this
 */
proto.notification.MessagingTemplateList.prototype.setTotalcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.FetchTemplateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.FetchTemplateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.FetchTemplateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.FetchTemplateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    templatename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.FetchTemplateRequest}
 */
proto.notification.FetchTemplateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.FetchTemplateRequest;
  return proto.notification.FetchTemplateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.FetchTemplateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.FetchTemplateRequest}
 */
proto.notification.FetchTemplateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplatename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.FetchTemplateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.FetchTemplateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.FetchTemplateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.FetchTemplateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTemplatename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string templateId = 1;
 * @return {string}
 */
proto.notification.FetchTemplateRequest.prototype.getTemplateid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.FetchTemplateRequest} returns this
 */
proto.notification.FetchTemplateRequest.prototype.setTemplateid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string templateName = 2;
 * @return {string}
 */
proto.notification.FetchTemplateRequest.prototype.getTemplatename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.FetchTemplateRequest} returns this
 */
proto.notification.FetchTemplateRequest.prototype.setTemplatename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 pageNumber = 3;
 * @return {number}
 */
proto.notification.FetchTemplateRequest.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.FetchTemplateRequest} returns this
 */
proto.notification.FetchTemplateRequest.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 pageSize = 4;
 * @return {number}
 */
proto.notification.FetchTemplateRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.FetchTemplateRequest} returns this
 */
proto.notification.FetchTemplateRequest.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notification.MessageProto.repeatedFields_ = [3,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.MessageProto.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.MessageProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.MessageProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessageProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recipientsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    recievedbyList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    readbyList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    respondedbyList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    failedrecipientsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    createdon: jspb.Message.getFieldWithDefault(msg, 9, 0),
    scheduleinfo: (f = msg.getScheduleinfo()) && proto.notification.ScheduleInfo.toObject(includeInstance, f),
    mediaparameters: (f = msg.getMediaparameters()) && proto.notification.MediaParameters.toObject(includeInstance, f),
    buttonsMap: (f = msg.getButtonsMap()) ? f.toObject(includeInstance, undefined) : [],
    transactionid: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.MessageProto}
 */
proto.notification.MessageProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.MessageProto;
  return proto.notification.MessageProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.MessageProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.MessageProto}
 */
proto.notification.MessageProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRecipients(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addRecievedby(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addReadby(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addRespondedby(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addFailedrecipients(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 10:
      var value = new proto.notification.ScheduleInfo;
      reader.readMessage(value,proto.notification.ScheduleInfo.deserializeBinaryFromReader);
      msg.setScheduleinfo(value);
      break;
    case 11:
      var value = new proto.notification.MediaParameters;
      reader.readMessage(value,proto.notification.MediaParameters.deserializeBinaryFromReader);
      msg.setMediaparameters(value);
      break;
    case 12:
      var value = msg.getButtonsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.MessageProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.MessageProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.MessageProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessageProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRecievedbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getReadbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getRespondedbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getFailedrecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getCreatedon();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getScheduleinfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.notification.ScheduleInfo.serializeBinaryToWriter
    );
  }
  f = message.getMediaparameters();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.notification.MediaParameters.serializeBinaryToWriter
    );
  }
  f = message.getButtonsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTransactionid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string messageId = 1;
 * @return {string}
 */
proto.notification.MessageProto.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.notification.MessageProto.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string recipients = 3;
 * @return {!Array<string>}
 */
proto.notification.MessageProto.prototype.getRecipientsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setRecipientsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.addRecipients = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearRecipientsList = function() {
  return this.setRecipientsList([]);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.notification.MessageProto.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string recievedBy = 5;
 * @return {!Array<string>}
 */
proto.notification.MessageProto.prototype.getRecievedbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setRecievedbyList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.addRecievedby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearRecievedbyList = function() {
  return this.setRecievedbyList([]);
};


/**
 * repeated string readBy = 6;
 * @return {!Array<string>}
 */
proto.notification.MessageProto.prototype.getReadbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setReadbyList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.addReadby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearReadbyList = function() {
  return this.setReadbyList([]);
};


/**
 * repeated string respondedBy = 7;
 * @return {!Array<string>}
 */
proto.notification.MessageProto.prototype.getRespondedbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setRespondedbyList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.addRespondedby = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearRespondedbyList = function() {
  return this.setRespondedbyList([]);
};


/**
 * repeated string failedRecipients = 8;
 * @return {!Array<string>}
 */
proto.notification.MessageProto.prototype.getFailedrecipientsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setFailedrecipientsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.addFailedrecipients = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearFailedrecipientsList = function() {
  return this.setFailedrecipientsList([]);
};


/**
 * optional int64 createdOn = 9;
 * @return {number}
 */
proto.notification.MessageProto.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setCreatedon = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional ScheduleInfo scheduleInfo = 10;
 * @return {?proto.notification.ScheduleInfo}
 */
proto.notification.MessageProto.prototype.getScheduleinfo = function() {
  return /** @type{?proto.notification.ScheduleInfo} */ (
    jspb.Message.getWrapperField(this, proto.notification.ScheduleInfo, 10));
};


/**
 * @param {?proto.notification.ScheduleInfo|undefined} value
 * @return {!proto.notification.MessageProto} returns this
*/
proto.notification.MessageProto.prototype.setScheduleinfo = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearScheduleinfo = function() {
  return this.setScheduleinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.MessageProto.prototype.hasScheduleinfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MediaParameters mediaParameters = 11;
 * @return {?proto.notification.MediaParameters}
 */
proto.notification.MessageProto.prototype.getMediaparameters = function() {
  return /** @type{?proto.notification.MediaParameters} */ (
    jspb.Message.getWrapperField(this, proto.notification.MediaParameters, 11));
};


/**
 * @param {?proto.notification.MediaParameters|undefined} value
 * @return {!proto.notification.MessageProto} returns this
*/
proto.notification.MessageProto.prototype.setMediaparameters = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearMediaparameters = function() {
  return this.setMediaparameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.MessageProto.prototype.hasMediaparameters = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * map<string, string> buttons = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.notification.MessageProto.prototype.getButtonsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.clearButtonsMap = function() {
  this.getButtonsMap().clear();
  return this;
};


/**
 * optional string transactionId = 13;
 * @return {string}
 */
proto.notification.MessageProto.prototype.getTransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessageProto} returns this
 */
proto.notification.MessageProto.prototype.setTransactionid = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notification.MessageList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.MessageList.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.MessageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.MessageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessageList.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.notification.MessageProto.toObject, includeInstance),
    totalcount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.MessageList}
 */
proto.notification.MessageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.MessageList;
  return proto.notification.MessageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.MessageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.MessageList}
 */
proto.notification.MessageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.notification.MessageProto;
      reader.readMessage(value,proto.notification.MessageProto.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.MessageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.MessageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.MessageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.notification.MessageProto.serializeBinaryToWriter
    );
  }
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated MessageProto messages = 1;
 * @return {!Array<!proto.notification.MessageProto>}
 */
proto.notification.MessageList.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.notification.MessageProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.notification.MessageProto, 1));
};


/**
 * @param {!Array<!proto.notification.MessageProto>} value
 * @return {!proto.notification.MessageList} returns this
*/
proto.notification.MessageList.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.notification.MessageProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.notification.MessageProto}
 */
proto.notification.MessageList.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.notification.MessageProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.notification.MessageList} returns this
 */
proto.notification.MessageList.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional int32 totalCount = 2;
 * @return {number}
 */
proto.notification.MessageList.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.MessageList} returns this
 */
proto.notification.MessageList.prototype.setTotalcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.MessageFilters.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.MessageFilters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.MessageFilters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessageFilters.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transactionid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.MessageFilters}
 */
proto.notification.MessageFilters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.MessageFilters;
  return proto.notification.MessageFilters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.MessageFilters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.MessageFilters}
 */
proto.notification.MessageFilters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.MessageFilters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.MessageFilters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.MessageFilters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.MessageFilters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransactionid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string messageId = 1;
 * @return {string}
 */
proto.notification.MessageFilters.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessageFilters} returns this
 */
proto.notification.MessageFilters.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.notification.MessageFilters.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessageFilters} returns this
 */
proto.notification.MessageFilters.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transactionId = 3;
 * @return {string}
 */
proto.notification.MessageFilters.prototype.getTransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.notification.MessageFilters} returns this
 */
proto.notification.MessageFilters.prototype.setTransactionid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notification.FetchMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notification.FetchMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notification.FetchMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.FetchMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filters: (f = msg.getFilters()) && proto.notification.MessageFilters.toObject(includeInstance, f),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notification.FetchMessageRequest}
 */
proto.notification.FetchMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notification.FetchMessageRequest;
  return proto.notification.FetchMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notification.FetchMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notification.FetchMessageRequest}
 */
proto.notification.FetchMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.notification.MessageFilters;
      reader.readMessage(value,proto.notification.MessageFilters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notification.FetchMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notification.FetchMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notification.FetchMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notification.FetchMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.notification.MessageFilters.serializeBinaryToWriter
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional MessageFilters filters = 1;
 * @return {?proto.notification.MessageFilters}
 */
proto.notification.FetchMessageRequest.prototype.getFilters = function() {
  return /** @type{?proto.notification.MessageFilters} */ (
    jspb.Message.getWrapperField(this, proto.notification.MessageFilters, 1));
};


/**
 * @param {?proto.notification.MessageFilters|undefined} value
 * @return {!proto.notification.FetchMessageRequest} returns this
*/
proto.notification.FetchMessageRequest.prototype.setFilters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.notification.FetchMessageRequest} returns this
 */
proto.notification.FetchMessageRequest.prototype.clearFilters = function() {
  return this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.notification.FetchMessageRequest.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 pageNumber = 2;
 * @return {number}
 */
proto.notification.FetchMessageRequest.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.FetchMessageRequest} returns this
 */
proto.notification.FetchMessageRequest.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 pageSize = 3;
 * @return {number}
 */
proto.notification.FetchMessageRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.notification.FetchMessageRequest} returns this
 */
proto.notification.FetchMessageRequest.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.notification.MediaType = {
  IMAGE: 0,
  VIDEO: 1,
  AUDIO: 2
};

/**
 * @enum {number}
 */
proto.notification.Category = {
  AUTHENTICATION: 0,
  MARKETING: 1,
  UTILITY: 2
};

/**
 * @enum {number}
 */
proto.notification.ButtonType = {
  NONE: 0,
  CALLTOACTION: 1,
  QUICKREPLY: 2
};

/**
 * @enum {number}
 */
proto.notification.ActionType = {
  CALLPHONENUMBER: 0,
  VISITWEBSITE: 1
};

/**
 * @enum {number}
 */
proto.notification.UrlType = {
  STATIC: 0,
  DYNAMIC: 1
};

goog.object.extend(exports, proto.notification);
