/**
 * @fileoverview gRPC-Web generated client stub for notification
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: notification-service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as notification$service_pb from './notification-service_pb'; // proto import: "notification-service.proto"


export class NotificationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegisterDeviceInstance = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/RegisterDeviceInstance',
    grpcWeb.MethodType.UNARY,
    notification$service_pb.RegisterDeviceInstanceRequest,
    notification$service_pb.NotificationStatusResponse,
    (request: notification$service_pb.RegisterDeviceInstanceRequest) => {
      return request.serializeBinary();
    },
    notification$service_pb.NotificationStatusResponse.deserializeBinary
  );

  registerDeviceInstance(
    request: notification$service_pb.RegisterDeviceInstanceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<notification$service_pb.NotificationStatusResponse>;

  registerDeviceInstance(
    request: notification$service_pb.RegisterDeviceInstanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification$service_pb.NotificationStatusResponse) => void): grpcWeb.ClientReadableStream<notification$service_pb.NotificationStatusResponse>;

  registerDeviceInstance(
    request: notification$service_pb.RegisterDeviceInstanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification$service_pb.NotificationStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/RegisterDeviceInstance',
        request,
        metadata || {},
        this.methodDescriptorRegisterDeviceInstance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/RegisterDeviceInstance',
    request,
    metadata || {},
    this.methodDescriptorRegisterDeviceInstance);
  }

  methodDescriptorRegisterEvent = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/RegisterEvent',
    grpcWeb.MethodType.UNARY,
    notification$service_pb.RegisterEventRequest,
    notification$service_pb.NotificationStatusResponse,
    (request: notification$service_pb.RegisterEventRequest) => {
      return request.serializeBinary();
    },
    notification$service_pb.NotificationStatusResponse.deserializeBinary
  );

  registerEvent(
    request: notification$service_pb.RegisterEventRequest,
    metadata?: grpcWeb.Metadata | null): Promise<notification$service_pb.NotificationStatusResponse>;

  registerEvent(
    request: notification$service_pb.RegisterEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification$service_pb.NotificationStatusResponse) => void): grpcWeb.ClientReadableStream<notification$service_pb.NotificationStatusResponse>;

  registerEvent(
    request: notification$service_pb.RegisterEventRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification$service_pb.NotificationStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/RegisterEvent',
        request,
        metadata || {},
        this.methodDescriptorRegisterEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/RegisterEvent',
    request,
    metadata || {},
    this.methodDescriptorRegisterEvent);
  }

  methodDescriptorGetFCMTopics = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetFCMTopics',
    grpcWeb.MethodType.UNARY,
    notification$service_pb.GetFCMTopicsRequest,
    notification$service_pb.FCMTopicsResponse,
    (request: notification$service_pb.GetFCMTopicsRequest) => {
      return request.serializeBinary();
    },
    notification$service_pb.FCMTopicsResponse.deserializeBinary
  );

  getFCMTopics(
    request: notification$service_pb.GetFCMTopicsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<notification$service_pb.FCMTopicsResponse>;

  getFCMTopics(
    request: notification$service_pb.GetFCMTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification$service_pb.FCMTopicsResponse) => void): grpcWeb.ClientReadableStream<notification$service_pb.FCMTopicsResponse>;

  getFCMTopics(
    request: notification$service_pb.GetFCMTopicsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification$service_pb.FCMTopicsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetFCMTopics',
        request,
        metadata || {},
        this.methodDescriptorGetFCMTopics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetFCMTopics',
    request,
    metadata || {},
    this.methodDescriptorGetFCMTopics);
  }

}

