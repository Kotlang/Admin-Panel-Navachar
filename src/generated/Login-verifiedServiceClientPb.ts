/**
 * @fileoverview gRPC-Web generated client stub for login
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: login-verified.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as login$verified_pb from './login-verified_pb';
import * as common_pb from './common_pb';


export class LoginVerifiedClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorrequestProfileDeletion = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/requestProfileDeletion',
    grpcWeb.MethodType.UNARY,
    login$verified_pb.ProfileDeletionRequest,
    common_pb.StatusResponse,
    (request: login$verified_pb.ProfileDeletionRequest) => {
      return request.serializeBinary();
    },
    common_pb.StatusResponse.deserializeBinary
  );

  requestProfileDeletion(
    request: login$verified_pb.ProfileDeletionRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StatusResponse>;

  requestProfileDeletion(
    request: login$verified_pb.ProfileDeletionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<common_pb.StatusResponse>;

  requestProfileDeletion(
    request: login$verified_pb.ProfileDeletionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/requestProfileDeletion',
        request,
        metadata || {},
        this.methodDescriptorrequestProfileDeletion,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/requestProfileDeletion',
    request,
    metadata || {},
    this.methodDescriptorrequestProfileDeletion);
  }

  methodDescriptorcancelProfileDeletionRequest = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/cancelProfileDeletionRequest',
    grpcWeb.MethodType.UNARY,
    common_pb.IdRequest,
    common_pb.StatusResponse,
    (request: common_pb.IdRequest) => {
      return request.serializeBinary();
    },
    common_pb.StatusResponse.deserializeBinary
  );

  cancelProfileDeletionRequest(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StatusResponse>;

  cancelProfileDeletionRequest(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<common_pb.StatusResponse>;

  cancelProfileDeletionRequest(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/cancelProfileDeletionRequest',
        request,
        metadata || {},
        this.methodDescriptorcancelProfileDeletionRequest,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/cancelProfileDeletionRequest',
    request,
    metadata || {},
    this.methodDescriptorcancelProfileDeletionRequest);
  }

  methodDescriptorblockUser = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/blockUser',
    grpcWeb.MethodType.UNARY,
    common_pb.IdRequest,
    common_pb.StatusResponse,
    (request: common_pb.IdRequest) => {
      return request.serializeBinary();
    },
    common_pb.StatusResponse.deserializeBinary
  );

  blockUser(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StatusResponse>;

  blockUser(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<common_pb.StatusResponse>;

  blockUser(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/blockUser',
        request,
        metadata || {},
        this.methodDescriptorblockUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/blockUser',
    request,
    metadata || {},
    this.methodDescriptorblockUser);
  }

  methodDescriptorunblockUser = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/unblockUser',
    grpcWeb.MethodType.UNARY,
    common_pb.IdRequest,
    common_pb.StatusResponse,
    (request: common_pb.IdRequest) => {
      return request.serializeBinary();
    },
    common_pb.StatusResponse.deserializeBinary
  );

  unblockUser(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StatusResponse>;

  unblockUser(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<common_pb.StatusResponse>;

  unblockUser(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/unblockUser',
        request,
        metadata || {},
        this.methodDescriptorunblockUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/unblockUser',
    request,
    metadata || {},
    this.methodDescriptorunblockUser);
  }

  methodDescriptorchangeUserType = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/changeUserType',
    grpcWeb.MethodType.UNARY,
    login$verified_pb.ChangeUserTypeRequest,
    common_pb.StatusResponse,
    (request: login$verified_pb.ChangeUserTypeRequest) => {
      return request.serializeBinary();
    },
    common_pb.StatusResponse.deserializeBinary
  );

  changeUserType(
    request: login$verified_pb.ChangeUserTypeRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StatusResponse>;

  changeUserType(
    request: login$verified_pb.ChangeUserTypeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<common_pb.StatusResponse>;

  changeUserType(
    request: login$verified_pb.ChangeUserTypeRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/changeUserType',
        request,
        metadata || {},
        this.methodDescriptorchangeUserType,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/changeUserType',
    request,
    metadata || {},
    this.methodDescriptorchangeUserType);
  }

  methodDescriptorisUserAdmin = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/isUserAdmin',
    grpcWeb.MethodType.UNARY,
    common_pb.IdRequest,
    login$verified_pb.IsUserAdminResponse,
    (request: common_pb.IdRequest) => {
      return request.serializeBinary();
    },
    login$verified_pb.IsUserAdminResponse.deserializeBinary
  );

  isUserAdmin(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null): Promise<login$verified_pb.IsUserAdminResponse>;

  isUserAdmin(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: login$verified_pb.IsUserAdminResponse) => void): grpcWeb.ClientReadableStream<login$verified_pb.IsUserAdminResponse>;

  isUserAdmin(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: login$verified_pb.IsUserAdminResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/isUserAdmin',
        request,
        metadata || {},
        this.methodDescriptorisUserAdmin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/isUserAdmin',
    request,
    metadata || {},
    this.methodDescriptorisUserAdmin);
  }

  methodDescriptordeleteProfile = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/deleteProfile',
    grpcWeb.MethodType.UNARY,
    common_pb.IdRequest,
    common_pb.StatusResponse,
    (request: common_pb.IdRequest) => {
      return request.serializeBinary();
    },
    common_pb.StatusResponse.deserializeBinary
  );

  deleteProfile(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StatusResponse>;

  deleteProfile(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<common_pb.StatusResponse>;

  deleteProfile(
    request: common_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/deleteProfile',
        request,
        metadata || {},
        this.methodDescriptordeleteProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/deleteProfile',
    request,
    metadata || {},
    this.methodDescriptordeleteProfile);
  }

  methodDescriptorgetPendingProfileDeletionRequests = new grpcWeb.MethodDescriptor(
    '/login.LoginVerified/getPendingProfileDeletionRequests',
    grpcWeb.MethodType.UNARY,
    login$verified_pb.GetProfileDeletionRequest,
    common_pb.ProfileListResponse,
    (request: login$verified_pb.GetProfileDeletionRequest) => {
      return request.serializeBinary();
    },
    common_pb.ProfileListResponse.deserializeBinary
  );

  getPendingProfileDeletionRequests(
    request: login$verified_pb.GetProfileDeletionRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.ProfileListResponse>;

  getPendingProfileDeletionRequests(
    request: login$verified_pb.GetProfileDeletionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.ProfileListResponse) => void): grpcWeb.ClientReadableStream<common_pb.ProfileListResponse>;

  getPendingProfileDeletionRequests(
    request: login$verified_pb.GetProfileDeletionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.ProfileListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/login.LoginVerified/getPendingProfileDeletionRequests',
        request,
        metadata || {},
        this.methodDescriptorgetPendingProfileDeletionRequests,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/login.LoginVerified/getPendingProfileDeletionRequests',
    request,
    metadata || {},
    this.methodDescriptorgetPendingProfileDeletionRequests);
  }

}

